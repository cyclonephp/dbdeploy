<?php
namespace cyclone\dbdeploy;

use cyclone as cy;

/**
 * @author Bence ErÅ‘s <crystal@cyclonephp.org>
 * @package dbdeploy
 */
abstract class CommandProcessor {

    const COMMAND_APPLY = 'apply';

    const COMMAND_REVERT = 'revert';

    const COMMAND_DIFF = 'diff';

    public static function factory($command) {
        switch ($command) {
            case self::COMMAND_APPLY:
                return new ApplyCommandProcessor;
            case self::COMMAND_REVERT:
                return new RevertCommandProcessor;
            case self::COMMAND_DIFF:
                return new DiffCommandProcessor;
        }
    }

    /**
     * The target revision number the command operates with. Its concrete semantics
     * may vary according to the current command type (represented by the subclasses).
     *
     * @var mixed
     */
    protected $_revision;

    /**
     * The delta set the command should operate with.
     *
     * @var string
     */
    protected $_delta_set;

    /**
     * The name of the changelog table which will be used up. The table
     * should exist in the database marked by @c $_connection .
     *
     * @var string
     */
    protected $_changelog_table;

    /**
     * The database connection name. See DB library docs for details.
     *
     * @var string
     */
    protected $_connection;

    /**
     * The directory of the source path. Delta set source files are in the subdirectories
     * of this directory.
     *
     * @var string
     */
    protected $_src_dir;

    /**
     * Flag marking if the SQL generated by the given command should be executed
     * on the connection or not.
     *
     * @var boolean
     */
    protected $_exec;

    /**
     * Flag marking if the SQL generated by the command should be written to the output or not.
     *
     * @var boolean
     */
    protected $_quiet;

    /**
     * The SQL revision source reader used by this command processor.
     * The @c execute() method sets up a @c FileSourceReader instance.
     *
     * @var SourceReader
     */
    protected $_source_reader;

    public function execute($args) {
        $this->setup($args);
        $this->_source_reader = new FileSourceReader($this->_src_dir);

        $ddl_str = $this->get_result();
        if ( ! $this->_quiet) {
            echo $ddl_str;
        }
    }

    protected function exec_ddl($ddl_str) {
        DB::executor($this->_connection)->exec_custom($ddl_str);
    }

    public function setup($args) {
        if (isset($args['--revision'])) {
            $this->_revision = $args['--revision'];
        }

        if (isset($args['--delta-set'])) {
            $this->_delta_set = $args['--delta-set'];
        } else {
            $this->_delta_set = cy\Config::inst()->get('dbdeploy.delta_set');
        }

        if (isset($args['--changelog-table'])) {
            $this->_changelog_table = $args['--changelog-table'];
        } else {
            $this->_changelog_table = cy\Config::inst()->get('dbdeploy.changelog_table');
        }

        if (isset($args['--connection'])) {
            $this->_connection = $args['--connection'];
        } else {
            $this->_connection = cy\Config::inst()->get('dbdeploy.connection');
        }

        if (isset($args['--src-dir'])) {
            $this->_src_dir = $args['--src-dir'];
        } else {
            $this->_src_dir = cy\Config::inst()->get('dbdeploy.src_dir');
        }

        if (isset($args['--exec'])) {
            $this->_exec = $args['--exec'];
        } else {
            $this->_exec = cy\Config::inst()->get('dbdeploy.exec');
        }

        if (isset($args['--quiet'])) {
            $this->_quiet = $args['--quiet'];
        } else {
            $this->_quiet = cy\Config::inst()->get('dbdeploy.quiet');
        }
    }

    /**
     * Sets the reader which will be used to read the SQL source files.
     *
     * @param SourceReader $reader
     */
    public function set_source_reader(SourceReader $reader) {
        $this->_source_reader = $reader;
    }

    public abstract function get_result();

}
